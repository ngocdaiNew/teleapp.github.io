#pragma checksum "C:\Users\ngocd\source\repos\TeleApp\Client\Pages\Logfile\IndexLogfile.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "150f3c960cd05486f86940ebf1e58d7b3b717326"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TeleApp.Client.Pages.Logfile
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\ngocd\source\repos\TeleApp\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\ngocd\source\repos\TeleApp\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\ngocd\source\repos\TeleApp\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\ngocd\source\repos\TeleApp\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\ngocd\source\repos\TeleApp\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\ngocd\source\repos\TeleApp\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\ngocd\source\repos\TeleApp\Client\_Imports.razor"
using TeleApp.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\ngocd\source\repos\TeleApp\Client\_Imports.razor"
using TeleApp.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\ngocd\source\repos\TeleApp\Client\_Imports.razor"
using Telerik.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\ngocd\source\repos\TeleApp\Client\_Imports.razor"
using Telerik.Blazor.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\ngocd\source\repos\TeleApp\Client\_Imports.razor"
using TeleApp.Shared.Utils;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\ngocd\source\repos\TeleApp\Client\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\ngocd\source\repos\TeleApp\Client\_Imports.razor"
using TeleApp.Shared.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\ngocd\source\repos\TeleApp\Client\Pages\Logfile\IndexLogfile.razor"
using Microsoft.Extensions.Primitives;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\ngocd\source\repos\TeleApp\Client\Pages\Logfile\IndexLogfile.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\ngocd\source\repos\TeleApp\Client\Pages\Logfile\IndexLogfile.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\ngocd\source\repos\TeleApp\Client\Pages\Logfile\IndexLogfile.razor"
using System.Collections.ObjectModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\ngocd\source\repos\TeleApp\Client\Pages\Logfile\IndexLogfile.razor"
using Faso.Blazor.SpinKit;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\ngocd\source\repos\TeleApp\Client\Pages\Logfile\IndexLogfile.razor"
using TeleApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\ngocd\source\repos\TeleApp\Client\Pages\Logfile\IndexLogfile.razor"
using TeleApp.Shared.Resources;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\ngocd\source\repos\TeleApp\Client\Pages\Logfile\IndexLogfile.razor"
using Telerik.Blazor.Services;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/{paramproject}/{paramphone}")]
    public partial class IndexLogfile : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 116 "C:\Users\ngocd\source\repos\TeleApp\Client\Pages\Logfile\IndexLogfile.razor"
       
    private ResultGridLogfile _resultGrid = new ResultGridLogfile();
    private ResultGridLogfile _resultGridNoFilterSearch = new ResultGridLogfile();
    string valueSearch { get; set; } = "";
    object valueSearchChild { get; set; } = "";
    string valueComboTaikhoan { get; set; } = "";
    //Tạo ra biến này để tránh cho khung search quá nhạy
    object valueComboTaikhoanChild { get; set; } = null;
    StringFilterOperator filterOperator { get; set; } = StringFilterOperator.Contains;
    private int selectclick = 0;

    //custom
    private int PageSize { get; set; } = 50;
    private int Page { get; set; } = 1; // the page indexes are 1-based

    //params select
    List<SelectModel> dataSelectDuAn { get; set; } = new List<SelectModel>();
    List<SelectModel> dataSelectTaiKhoan { get; set; } = new List<SelectModel>();
    List<SelectModel> dataSelectLoaiCuocGoi { get; set; } = new List<SelectModel>();
    private string selectDuAnTerm { get; set; } = "";
    //private string selectTaiKhoanTerm { get; set; } = "";
    private string selectLoaiCuocGoiTerm { get; set; } = "";
    private DateTime? StartDateValue { get; set; } = DateTime.Now.AddDays(-90);
    private DateTime? EndDateValue { get; set; } = DateTime.Now;
    private string StartDateStr { get; set; } = "";
    private string EndDateStr { get; set; } = "";
    //end params select
    //params from another page
    [Parameter]
    public string Paramproject { get; set; }
    [Parameter]
    public string Paramphone { get; set; }
    //end
    //bool showSpinLoadingDataGrid { get; set; } = false;

    async Task PageChangedHandler(int page)
    {
        Page = page;
        //cập nhật lại database
        await GetMemberFilter(Page, "", valueSearch, selectDuAnTerm, selectLoaiCuocGoiTerm, valueComboTaikhoan, StartDateStr, EndDateStr);
    }
    private async Task ChangeTimSdtHandler(object theUserInput)
    {
        if (valueSearchChild == theUserInput) return;
        string valueSearchNew = "";
        if (theUserInput == null || theUserInput == "")
        {
            valueSearchNew = "";
        }
        else
        {
            valueSearchNew = theUserInput.ToString();
        }
        valueSearch = valueSearchNew;
        valueSearchChild = valueSearch;

        await GetMemberFilter(1, "", valueSearch, selectDuAnTerm, selectLoaiCuocGoiTerm, valueComboTaikhoan, StartDateStr, EndDateStr);
        Page = 1;
    }
    //async Task ComboSelectTaiKhoanChange(string theUserChoice)
    //{
    //    if(string.IsNullOrEmpty(theUserChoice))
    //    {
    //        Console.WriteLine("ComboSelectTaiKhoanChange ");
    //    }
    //    //if (string.IsNullOrEmpty(theUserChoice.ToString()))
    //    //{
    //    //    //await GetMemberFilter(1, "", "");
    //    //    Page = 1;

    //    //}
    //}
    async Task OnChangeComboSelectTaiKhoanHandler(object theUserInput)
    {
        if (valueComboTaikhoanChild == theUserInput) return;
        string valueComboNew = "";
        if (theUserInput == null || theUserInput == "")
        {
            valueComboNew = "";
        }
        else
        {
            valueComboNew = theUserInput.ToString();
        }
        valueComboTaikhoan = valueComboNew;
        valueComboTaikhoanChild = valueComboTaikhoan;
        await GetMemberFilter(1, "", valueSearch, selectDuAnTerm, selectLoaiCuocGoiTerm, valueComboTaikhoan, StartDateStr, EndDateStr);
        Page = 1;
    }
    async Task StartValueChangedHandler(DateTime? currStart)
    {
        StartDateValue = currStart;
        StartDateStr = GridUtil.UnixMiliSecondFromDateTime(StartDateValue.GetValueOrDefault());
    }

    async Task EndValueChangedHandler(DateTime? currEnd)
    {
        // you have to update the model manually because handling the <Parameter>Changed event does not let you use @bind-<Parameter>
        // not updating the model will effectively cancel the event
        EndDateValue = currEnd;
        EndDateStr = GridUtil.UnixMiliSecondFromDateTime(EndDateValue.GetValueOrDefault().AddDays(1));
        await GetMemberFilter(1, "", valueSearch, selectDuAnTerm, selectLoaiCuocGoiTerm, valueComboTaikhoan, StartDateStr, EndDateStr);
        Page = 1;
    }
    async Task SelectDuAnChangeHandler(string theUserInput)
    {
        if (selectDuAnTerm == theUserInput)
        {
            return;
        }
        selectDuAnTerm = theUserInput;
        await GetMemberFilter(1, "", valueSearch, selectDuAnTerm, selectLoaiCuocGoiTerm, valueComboTaikhoan, StartDateStr, EndDateStr);
        Page = 1;
    }
    async Task SelectLoaiCuocGoiChangeHandler(string selectVal)
    {
        if (selectLoaiCuocGoiTerm == selectVal)
        {
            return;
        }
        selectLoaiCuocGoiTerm = selectVal;
        await GetMemberFilter(1, "", valueSearch, selectDuAnTerm, selectLoaiCuocGoiTerm, valueComboTaikhoan, StartDateStr, EndDateStr);
        Page = 1;
    }
    //private async Task GetSelectValBeforeParameterSet()
    //{
    //    List<SelectModel> listSelectModelDuan = new List<SelectModel>();
    //    List<SelectModel> listSelectModelLoaiCuocGoi = new List<SelectModel>();
    //    List<SelectModel> listSelectModelTaiKhoan = new List<SelectModel>();
    //    var getdataSelect = await Http.GetFromJsonAsync<ListColumnSelectModel>("Logfile/GetLogfileSelect");
    //    getdataSelect.ListProject.ForEach(d => listSelectModelDuan.Add(new SelectModel() { DisplayText = d, ValueText = d }));
    //    getdataSelect.ListType.ForEach(d => listSelectModelLoaiCuocGoi.Add(new SelectModel() { DisplayText = GridUtil.ConvertTypeCall(d), ValueText = d.ToString() }));
    //    getdataSelect.ListStaff.ForEach(d => listSelectModelTaiKhoan.Add(new SelectModel() { DisplayText = d, ValueText = d }));

    //    dataSelectDuAn = new ObservableCollection<SelectModel>(listSelectModelDuan);
    //    dataSelectLoaiCuocGoi = new ObservableCollection<SelectModel>(listSelectModelLoaiCuocGoi);
    //    dataSelectTaiKhoan = new ObservableCollection<SelectModel>(listSelectModelTaiKhoan);
    //}
    private async Task GetSelectValBeforeParameterSet()
    {
        List<SelectModel> listSelectModelDuan = new List<SelectModel>();
        List<SelectModel> listSelectModelLoaiCuocGoi = new List<SelectModel>();
        List<SelectModel> listSelectModelTaiKhoan = new List<SelectModel>();
        try
        {
            //Http.DefaultRequestHeaders.TryAddWithoutValidation("Content-Type", "application/json; charset=utf-8");
            var getdataSelect = await Http.GetFromJsonAsync<ListColumnSelectModel>("Logfile/GetLogfileSelect");

            getdataSelect.ListProject.ForEach(d => listSelectModelDuan.Add(new SelectModel() { DisplayText = d, ValueText = d }));
            getdataSelect.ListType.ForEach(d => listSelectModelLoaiCuocGoi.Add(new SelectModel() { DisplayText = GridUtil.ConvertTypeCall(d), ValueText = d.ToString() }));
            getdataSelect.ListStaff.ForEach(d => listSelectModelTaiKhoan.Add(new SelectModel() { DisplayText = d, ValueText = d }));

            dataSelectDuAn = listSelectModelDuan;
            dataSelectLoaiCuocGoi = listSelectModelLoaiCuocGoi;
            dataSelectTaiKhoan = listSelectModelTaiKhoan;
            selectDuAnTerm = "portal.hvnet.vn";
            if (!string.IsNullOrEmpty(Paramproject)) selectDuAnTerm = Paramproject;
            if (!string.IsNullOrEmpty(Paramphone)) valueSearch = Paramphone;

            StartDateStr = GridUtil.UnixMiliSecondFromDateTime(StartDateValue.GetValueOrDefault());
            EndDateStr = GridUtil.UnixMiliSecondFromDateTime(EndDateValue.GetValueOrDefault());

            await JSRuntime.InvokeVoidAsync("changelanguage");
            await GetMemberFilter(1, "", valueSearch, selectDuAnTerm, selectLoaiCuocGoiTerm, valueComboTaikhoan, StartDateStr, EndDateStr);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

    }
    private async Task GetMemberFilter(int trang, string termsdt, string termsearch, string termduan, string termcalltype, string termtaikhoan, string termstartdate, string termenddate)
    {
        if (termsdt == "null") termsdt = "";
        var jsonstringA = await Http.GetAsync("Logfile/GetPageFilter/" + trang + "/termsearch=" + GridUtil.FilterStringUnicode(termsearch) + "/" + PageSize + "/termduan=" + termduan + "/termcalltype=" + termcalltype + "/termtaikhoan=" + termtaikhoan + "/startdate=" + termstartdate + "/enddate=" + termenddate);
        if ((int)jsonstringA.StatusCode != 204)
        {
            var jsonstring = await jsonstringA.Content.ReadAsStringAsync();
            _resultGrid = JsonConvert.DeserializeObject<ResultGridLogfile>(jsonstring);

            if (_resultGridNoFilterSearch.listLogfiles == null)
            {
                _resultGridNoFilterSearch.listLogfiles = new List<LogfileModel>();
                _resultGridNoFilterSearch.listLogfiles.Add(new LogfileModel { Staff = "", Phone = "" });
                _resultGrid.listLogfiles.ForEach(m => _resultGridNoFilterSearch.listLogfiles.Add(m));
                _resultGridNoFilterSearch.pageSize = _resultGrid.pageSize;
            }
        }
        else
        {
            _resultGrid = new ResultGridLogfile();
            _resultGrid.listLogfiles = new List<LogfileModel>();
        }
    }
    //public override async Task SetParametersAsync(ParameterView parameters)
    //{
    //    //await ...
    //    await base.SetParametersAsync(parameters);
    //}
    protected override async Task OnInitializedAsync()
    {
        _resultGrid.listLogfiles = new List<LogfileModel>();
        await GetSelectValBeforeParameterSet();
    }
    //sự kiện thay đổi giao diện trên màn hình, hay thay đổi dữ liệu bind đều chạy vào hàm này trước.
    //protected override bool ShouldRender()
    //{
    //    selectclick++;
    //    if (selectclick == 2 || string.IsNullOrEmpty(selectSexTerm))
    //    {
    //        selectclick = 0;
    //    }
    //    else
    //    {
    //    }
    //    return true;
    //}

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITelerikStringLocalizer Localizer { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
